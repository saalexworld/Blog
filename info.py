"""Сериализатор"""
#импортируется из рест фрамеворка from rest-framework import serializer
#1. базовый класс serializers.Serializer
#(прописыавем все поля для сериализации и десереализации и можно доп. поля, которых нет в модельке, обязательно переопределяем методы create, update, delete)
#2. serializers.ModelSerializer
#(автоматически генерирует поля на основе модели, достаточно просто определить класс Meta, автоматически генерирует валидаторы)
#create, update, delete реализованны по умолчанию, аргумент many = True


#перед доступом к проверенным данным, необходимо вызвать метод is_valid() (метод, который вызывает все проверки сериализатора)


#save(*args, **kwargs) - создает объект, после проверки всех данных


#self.context - словарь, в котором хранятся данные, которые можно передать в сериализатор, там находится сам запрос


# to_representation(self, instance) - метод, который отвечает за преобразование одного объекта в json, для изменения выходных данных сериализатора

# для добваления доп. данных (через related_name - можно вывести связанные объекты)
#нужно вызывать через супер, чтобы он вернул словарь 
#super().to_representation(instance) - возвращает словарь, поля( которые указаны в Meta)


"""Валидаторы/проверки"""

# на основе функий - используются, когда валидатор применяется в разных классах сериализатора
#field_name = serializers.CharField(validators = [название функций])

#пользовательские валидаторы
#1. custom field (на уровне поля)

#def validate_fieldname(self, fieldname)


#2. object-level (на уровне объекта)
# def validate(self, data):(data -словарь с данными)



"""Сделать комментарии"""

